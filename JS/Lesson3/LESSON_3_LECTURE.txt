//LESSON 3

// ======= Data types, summary ========

// ---- JavaScript has 8 data types:

//  number
//  bigint
//  string
//  boolean
//  null
//  undefined
//  symbol    

//  object    

// ----- number -----

//  let weird = 9999999999999999;
//  console.log(weird);

// console.log(Number.MAX_SAFE_INTEGER);
// console.log(2 ** 53);
// console.log(Number.MIN_SAFE_INTEGER);

// проверка, что число находится в «безопасной» области:
// console.log(Number.isSafeInteger(8));
// console.log(Number.isSafeInteger(2 ** 53 ));


//  Number  -> один из встроенных объектов JavaScript

//  The MAX_VALUE property returns the largest number possible in JavaScript.

// console.log(Number.MAX_VALUE);

// ----   scientific (exponent) notation:
// console.log(3.56e+4);
// console.log(45e-3);

// особые случаи, относящиеся к типу number: Infinity; -Infinity; NaN
// console.log(5 / 0);
// console.log(-5 / 0);
// console.log('five' / 0);

// ----  + / -  ----

// let m = 8;    // 
// let n = -9;
// m = -m;
// n = -n;
//  console.log(m, n);   //  +m = 8 ; +n = -9 ;  -m = -8  ; -n = 9

// console.log(m !== -m);    //   8 !== -8
// console.log(n !== -n);    //   -9 !== 9

// console.log(m === -m);    // 
// console.log(n === -n);    // 
 

// ---- Проверки чисел на отрицательность / положительность:

// Negative number:         x < 0
// Not negative number:     x >= 0

// Pozitive number:         x > 0
// Not positive number:     x <= 0


// ----   NaN    ->   Not a Number

// console.log(typeof NaN);   //  number

// NaN означает вычислительную ошибку. Это результат неправильной или 
// неопределённой математической операции

// console.log('word' * 7);   // NaN
// console.log(+'g');
// console.log(4 / '');      //  4 / 0 =  Infinity

// console.log('5' + 4);         //   54
// console.log('a' + 'b');       //   ab


// console.log(NaN === NaN);
// console.log(NaN == NaN);

// let price = 55 / "w";        // NaN
// console.log(price == NaN);

// Проверка на NaN:  isNaN(); -> "не является числом"

// console.log(isNaN(5));
// console.log(isNaN('5'));
// console.log(isNaN('five'));  // isNaN
// console.log(isNaN(''));
// console.log(+'');
// console.log(isNaN(' '));
// console.log(+' ');
// console.log(isNaN(true));
// console.log(isNaN(false));
// console.log(isNaN(NaN));    // isNaN

//  Проверка, что в данных записан именно NaN:  Number.isNaN();

// console.log(Number.isNaN("five"));
// console.log(Number.isNaN('a'));
// console.log(Number.isNaN(NaN));
// console.log(Number.isNaN(9 - 'abc'));    
// console.log(9 - 'abc');


// ---  сравнения с NaN  ---
// !!!  NaN – возвращает false при любых сравнениях.

// console.log(NaN > 5);
// console.log(NaN >= 0);
// console.log('a' - 2 < 0);
// console.log(NaN == 0 - 'a');

// console.log(4 * NaN);
// console.log(4 + NaN);


// -----  странности при вычислениях с дробными числами

// console.log(0.1 + 0.2); // 0.30000000000000004
// console.log((0.1 + 0.2).toFixed(1)); // "0.3"
// console.log(+(0.1 + 0.2).toFixed(1)); // 0.3

// console.log(0.1.toFixed(20));   // показать 20 знаков после запятой; string !
// console.log(0.2.toFixed(20));

// console.log(0.6 / 3 == 0.2);    //  
// console.log(0.8 / 4 == 0.2);    //  


//   -----  bigint -----

// дают возможность работать с целыми числами произвольной длины
// используются в случаях, когда необходимо работать со значениями
// более чем 2 ** 53 или менее чем -(2 ** 53)

// символ "n" в конце числа означает, что это BigInt

// let varBigint = 123n;
// console.log(typeof varBigint);

// console.log(varBigint);    //
// console.log(Number(varBigint));   

// Все операции с числами типа bigint возвращают bigint.
// В математических операциях мы HE можем смешивать bigint и обычные числа

// console.log(12n + 34n);
// console.log(12 + 34n);

// --- Операции сравнения для bigint ---

// console.log(35n == 35n);
// console.log(35n > 12n);
// console.log(35n <= 12n);

// console.log(35n > 12);
// console.log(35n <= 12);

// console.log(35n == 35);     //
// console.log(35n === 35);    //

// console.log(isNaN(35n));    //




//   -----  null -----

// null это отдельный тип, который содержит только значение null

// let varNull = null;
// console.log(varNull);
// console.log(typeof varNull);



//   -----  undefined -----

// undefined это отдельный тип, который содержит только значение undefined
// undefined:  «значение не было присвоено»

// let varUndefined = undefined;
// let age;
// console.log(varUndefined, age);
// console.log(typeof varUndefined);
// console.log(varUndefined === age);


//  -----  Сравнение с null и undefined ----

// console.log(null == undefined);      //     true
// console.log(null === undefined);     //     false

// let high = null;
// let width;
// console.log(high === null);           //    true
// console.log(width === undefined);     //    true


// console.log(+ null);       //  0
// console.log(+ undefined);   //  NaN

// !!!  null и undefined не равны никаким другим значениям. Это специальное правило языка.

// console.log(null == 0);
// console.log(undefined == NaN);
// console.log(undefined == '');
// console.log(null == '');

// !!!  При использовании других операторов сравнения, значения null/undefined 
//      преобразуются к числам: null становится 0, а undefined – NaN.

// console.log(null > 0);
// console.log(null == 0);
// console.log(null >= 0);    // 0 >= 0   true
// console.log(null - 7);


// !!!  Значение undefined несравнимо с другими значениями

// let name;                 // undefined
// console.log(name < 7);
// console.log(name < 'a');
// console.log(name >= 0);

// --- null и undefined c логическими операторами ( &&   ||   !) ---

// console.log(null || true);    //  true
// console.log(null || false);   //  false
// console.log(false || null);   //  null
// console.log(true || null);    // true
// console.log(null && true);    //  null
// console.log(null && false);   //  null
// console.log(false && null);   //  false
// console.log(true && null);    //  null
// console.log(!null);           //  true

// console.log(undefined || true);    //  true
// console.log(undefined || false);   //  false
// console.log(false || undefined);   //  undefined
// console.log(true || undefined);    //  true
// console.log(undefined && true);    //  undefined
// console.log(undefined && false);   //  undefined
// console.log(false && undefined);   //  false
// console.log(true && undefined);    //  undefined
// console.log(!undefined);           //  true

// console.log(!!undefined);    //false   
// console.log(!!null);     // false

// можно ли получить null как результат выполнения каких-то операций? - да:
// console.log("a".match("b"));




//   -----  symbol ----- 

// symbol используется для создания уникальных идентификаторов (ключей), для объектов

// Символы гарантированно уникальны. Даже если мы создадим множество символов 
// с одинаковым описанием, это всё равно будут разные символы.

//   -----  object -----

// object -> особенный, не «примитивный» тип в JavaScript
//        -> В объектах хранят коллекции данных или более сложные структуры.

// примеры объектов:      массивы,   объекты,   объекты json,  функции

// const arr = [3, 9, 7];       //  array,   массив
// console.log(typeof arr);     //  "object"





// ----- Некоторые способы перевести данные из одного типа в другие  -----

// --- в number:

// let num1 = +'-567';
// let num2 = '-567' * 1;    // 1 * '567'
// let aa = '3.33'
// let num3 = +aa;
// let num4 = Number('-567');
// let num5 = Number(aa);
// console.log(num1, num2, num3, num4, num5);

// let num6 = '5' + '6' + '7';      // 
// console.log(num6);

// let num7 = +'12p';
// let num8 = Number('gh56');
// console.log(num7, num8);     //

// console.log(+null);          //   0
// console.log(+true);          //   1
// console.log(+false);         //   0
// console.log(+undefined);     //   NaN
// console.log(+NaN);           //   NaN

// console.log(35n);            //   
// console.log(+35n);           //   
// console.log(Number(35n));    //   

//  --- в string:

// let str1 = 234 + '';
// let str2 = '' + 234;
// let str3 = String(234);

// let bb = 3.45
// let str4 = '' + bb;
// let str5 = String(bb);

// console.log(str1, str2, str3, str4, str5);

// console.log('' + null);
// console.log('' + true);
// console.log('' + false);
// console.log('' + undefined);
// console.log('' + NaN);
// console.log('' + 35n);

//   --- в boolean

// let bool1 = !! 7;        //  true
// let bool2 = !! 'abc';    //  true
// let bool3 = !! '';       //  false
// let bool4 = !! ' ';      //  true 
// let cc = 1.01;
// let bool5 = !! cc;        //   true
// let bool6 = Boolean('');    //  false
// let bool7 = Boolean(10);    //  true

// console.log(+' ');
// console.log(bool1, bool2, bool3, bool4, bool5, bool6, bool7);

// console.log(!! null);   // false
// console.log(!! true);
// console.log(!! false);
// console.log(!! undefined);    // false
// console.log(!! NaN);   // false


// -----  typeof a;   typeof (a);  -----

// let variable = 7;
// console.log(typeof variable);    // "number"
// console.log(typeof (typeof variable));      // "string"

